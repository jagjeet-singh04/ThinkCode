[
  {
    "id": 1,
    "title": "Lily's Number Pair Hunt",
    "topic": "Array",
    "difficulty": "Easy",
    "description": "Lily has a list of numbers and a magic number called 'target'. Help her find two numbers in the list that add up to the target. Return their positions in the list.",
    "constraints": [
      "The list has between 2 and 10,000 numbers",
      "Numbers can be between -1,000,000,000 and 1,000,000,000",
      "Only one correct pair exists"
    ],
    "examples": [
      {
        "input": "numbers = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Numbers at position 0 (2) and 1 (7) add to 9"
      },
      {
        "input": "numbers = [3,4,2], target = 6",
        "output": "[1,2]",
        "explanation": "Numbers at position 1 (4) and 2 (2) add to 6"
      }
    ],
    "hint": "Original: Two Sum"
  },
  {
    "id": 2,
    "title": "Number Reverser Machine",
    "topic": "Math",
    "difficulty": "Medium",
    "description": "Tom has a magic machine that reverses digits of numbers. If the reversed number becomes too big for the machine (beyond 32-bit range), it returns 0. Help Tom use this machine correctly.",
    "constraints": [
      "Input number must be between -2^31 and 2^31-1"
    ],
    "examples": [
      {
        "input": "number = 123",
        "output": "321"
      },
      {
        "input": "number = -150",
        "output": "-51"
      }
    ],
    "hint": "Original: Reverse Integer"
  },
  {
    "id": 3,
    "title": "Water Container Challenge",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "There are vertical walls of different heights. Find two walls that can hold the most water between them when combined with the ground.",
    "constraints": [
      "2 to 100,000 walls",
      "Wall heights between 0 and 10,000 units"
    ],
    "examples": [
      {
        "input": "heights = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "Walls at position 1 and 8 give maximum water"
      },
      {
        "input": "heights = [5,3,2,1,4]",
        "output": "16",
        "explanation": "Walls at position 0 and 4 give maximum water"
      }
    ],
    "hint": "Original: Container With Most Water"
  },
  {
    "id": 4,
    "title": "Middle Value Finder",
    "topic": "Array",
    "difficulty": "Hard",
    "description": "Combine two sorted number lists and find the middle value of the combined list. If the combined list has even length, average the two middle values.",
    "constraints": [
      "Each list can have up to 1000 numbers",
      "Numbers between -1,000,000 and 1,000,000"
    ],
    "examples": [
      {
        "input": "list1 = [1,3], list2 = [2]",
        "output": "2.0",
        "explanation": "Combined list [1,2,3] has middle value 2"
      },
      {
        "input": "list1 = [1,2], list2 = [3,4]",
        "output": "2.5",
        "explanation": "Combined list [1,2,3,4] has middle values 2 and 3"
      }
    ],
    "hint": "Original: Median of Two Sorted Arrays"
  },
  {
    "id": 5,
    "title": "Palindrome Hunter",
    "topic": "String",
    "difficulty": "Medium",
    "description": "Find the longest word within a word that reads the same forwards and backwards.",
    "constraints": [
      "Word length between 1 and 1000 letters",
      "Contains only English letters and digits"
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\"",
        "explanation": "\"bab\" is a palindrome (\"aba\" is also valid)"
      },
      {
        "input": "s = \"racecar\"",
        "output": "\"racecar\"",
        "explanation": "The whole word is a palindrome"
      }
    ],
    "hint": "Original: Longest Palindromic Substring"
  },
  {
    "id": 6,
    "title": "Light Grid Controller",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "You have a grid of lights. If any light is off (0), turn off all lights in its row and column. Modify the grid in place.",
    "constraints": [
      "Grid size between 1x1 and 200x200",
      "Light values between -2^31 and 2^31-1"
    ],
    "examples": [
      {
        "input": "grid = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "[[1,0,1],[0,0,0],[1,0,1]]",
        "explanation": "The center light is off, so its row and column are turned off"
      },
      {
        "input": "grid = [[0,1,2],[3,4,5]]",
        "output": "[[0,0,0],[0,4,5]]",
        "explanation": "The top-left light is off, so first row and first column are turned off"
      }
    ],
    "hint": "Original: Set Matrix Zeros"
  },
  {
    "id": 7,
    "title": "Number Pyramid Builder",
    "topic": "Array",
    "difficulty": "Easy",
    "description": "Build a number pyramid where each row starts and ends with 1, and each number is the sum of the two numbers above it. Return the first numRows of the pyramid.",
    "constraints": [
      "Number of rows between 1 and 30"
    ],
    "examples": [
      {
        "input": "numRows = 5",
        "output": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
        "explanation": "The pyramid has 5 rows as shown"
      },
      {
        "input": "numRows = 3",
        "output": "[[1],[1,1],[1,2,1]]",
        "explanation": "The pyramid has 3 rows"
      }
    ],
    "hint": "Original: Pascal's Triangle"
  },
  {
    "id": 8,
    "title": "Next Number Sequence Finder",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Given a sequence of numbers, find the next sequence that is just larger than the current one. If no larger sequence exists, rearrange to the smallest sequence.",
    "constraints": [
      "Sequence length between 1 and 100 numbers",
      "Numbers between 0 and 100"
    ],
    "examples": [
      {
        "input": "sequence = [1,2,3]",
        "output": "[1,3,2]",
        "explanation": "The next larger sequence after [1,2,3] is [1,3,2]"
      },
      {
        "input": "sequence = [3,2,1]",
        "output": "[1,2,3]",
        "explanation": "No larger sequence, so return the smallest"
      }
    ],
    "hint": "Original: Next Permutation"
  },
  {
    "id": 9,
    "title": "Maximum Sum Subarray Finder",
    "topic": "Array",
    "difficulty": "Easy",
    "description": "Find a continuous part of a number list that has the highest total sum.",
    "constraints": [
      "List length between 1 and 100,000 numbers",
      "Numbers between -10,000 and 10,000"
    ],
    "examples": [
      {
        "input": "numbers = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has sum 6"
      },
      {
        "input": "numbers = [1,2,3,-2,5]",
        "output": "9",
        "explanation": "The subarray [1,2,3,-2,5] has sum 9"
      }
    ],
    "hint": "Original: Kadane's Algorithm"
  },
  {
    "id": 10,
    "title": "Color Sorter",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Arrange colored balls (red=0, white=1, blue=2) in order without using extra space. The order should be red, then white, then blue.",
    "constraints": [
      "Number of balls between 1 and 300",
      "Each ball is either red, white, or blue"
    ],
    "examples": [
      {
        "input": "balls = [2,0,2,1,1,0]",
        "output": "[0,0,1,1,2,2]",
        "explanation": "Balls sorted to red, red, white, white, blue, blue"
      },
      {
        "input": "balls = [1,0,2]",
        "output": "[0,1,2]",
        "explanation": "Balls sorted to red, white, blue"
      }
    ],
    "hint": "Original: Sort an array of 0's, 1's and 2's"
  },
  {
    "id": 11,
    "title": "Stock Market Profit Finder",
    "topic": "Array",
    "difficulty": "Easy",
    "description": "Given daily prices of a stock, find the best day to buy and then sell to make the most money. You can only buy one share and sell one share.",
    "constraints": [
      "Number of days between 1 and 100,000",
      "Prices between 0 and 10,000"
    ],
    "examples": [
      {
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy at day 2 (price 1) and sell at day 5 (price 6), profit 5"
      },
      {
        "input": "prices = [10,20,30]",
        "output": "20",
        "explanation": "Buy at day 1 (price 10) and sell at day 3 (price 30), profit 20"
      }
    ],
    "hint": "Original: Stock Buy and Sell"
  },
  {
    "id": 12,
    "title": "Grid Rotator",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Turn a grid of numbers by 90 degrees to the right. Modify the grid in place.",
    "constraints": [
      "Grid is square with size between 1 and 20",
      "Numbers between -1000 and 1000"
    ],
    "examples": [
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[7,4,1],[8,5,2],[9,6,3]]",
        "explanation": "Grid rotated 90 degrees clockwise"
      },
      {
        "input": "grid = [[1,2],[3,4]]",
        "output": "[[3,1],[4,2]]",
        "explanation": "Grid rotated 90 degrees clockwise"
      }
    ],
    "hint": "Original: Rotate Matrix"
  },
  {
    "id": 13,
    "title": "Interval Merger",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Combine overlapping time periods into continuous periods. Return the non-overlapping periods that cover all time.",
    "constraints": [
      "Number of periods between 1 and 10,000",
      "Each period has start and end between 0 and 100,000"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "Periods [1,3] and [2,6] overlap, so merged to [1,6]"
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "Periods [1,4] and [4,5] overlap, so merged to [1,5]"
      }
    ],
    "hint": "Original: Merge Overlapping Subintervals"
  },
  {
    "id": 14,
    "title": "Sorted List Merger",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Combine two sorted lists into one sorted list, but store the first part in the first list and the second part in the second list. Do not use extra space.",
    "constraints": [
      "First list size n, second list size m, both between 1 and 100,000",
      "Numbers between -1,000,000,000 and 1,000,000,000"
    ],
    "examples": [
      {
        "input": "list1 = [1,3,5], list2 = [2,4,6]",
        "output": "list1 = [1,2,3], list2 = [4,5,6]",
        "explanation": "Merged sorted list split into first 3 in list1, last 3 in list2"
      },
      {
        "input": "list1 = [1,2], list2 = [3,4]",
        "output": "list1 = [1,2], list2 = [3,4]",
        "explanation": "Already sorted, no change needed"
      }
    ],
    "hint": "Original: Merge two sorted arrays without extra space"
  },
  {
    "id": 15,
    "title": "Duplicate Number Finder",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "In a list of numbers from 1 to n, one number is repeated. Find the repeated number without changing the list and using constant extra space.",
    "constraints": [
      "List length n+1, with n between 1 and 100,000",
      "Numbers between 1 and n"
    ],
    "examples": [
      {
        "input": "numbers = [1,3,4,2,2]",
        "output": "2",
        "explanation": "The number 2 is repeated"
      },
      {
        "input": "numbers = [3,1,3,4,2]",
        "output": "3",
        "explanation": "The number 3 is repeated"
      }
    ],
    "hint": "Original: Find the duplicate in an array of N+1 integers"
  },
  {
    "id": 16,
    "title": "Missing and Repeated Number Finder",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "In a list of numbers from 1 to n, one number is missing and one number is repeated. Find both numbers.",
    "constraints": [
      "List length n, with n between 1 and 100,000"
    ],
    "examples": [
      {
        "input": "numbers = [3,1,2,5,3]",
        "output": "[3,4]",
        "explanation": "3 is repeated, 4 is missing"
      },
      {
        "input": "numbers = [1,2,2,4]",
        "output": "[2,3]",
        "explanation": "2 is repeated, 3 is missing"
      }
    ],
    "hint": "Original: Repeat and Missing Number"
  },
  {
    "id": 17,
    "title": "Out-of-Order Pair Counter",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Count how many pairs of numbers are out of order where the first number is larger than the second but comes first in the list.",
    "constraints": [
      "List length between 1 and 100,000",
      "Numbers between -1,000,000,000 and 1,000,000,000"
    ],
    "examples": [
      {
        "input": "numbers = [2,4,1,3,5]",
        "output": "3",
        "explanation": "Pairs (2,1), (4,1), (4,3) are out of order"
      },
      {
        "input": "numbers = [5,4,3,2,1]",
        "output": "10",
        "explanation": "All pairs are out of order"
      }
    ],
    "hint": "Original: Inversion of Array"
  },
  {
    "id": 18,
    "title": "Grid Number Searcher",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Find a number in a grid where each row is sorted and the first number of each row is greater than the last number of the previous row.",
    "constraints": [
      "Grid size between 1x1 and 100x100",
      "Numbers between -1,000,000,000 and 1,000,000,000"
    ],
    "examples": [
      {
        "input": "grid = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3",
        "output": "true",
        "explanation": "Number 3 is found in the grid"
      },
      {
        "input": "grid = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13",
        "output": "false",
        "explanation": "Number 13 is not found"
      }
    ],
    "hint": "Original: Search in a 2D matrix"
  },
  {
    "id": 19,
    "title": "Power Calculator",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Compute x multiplied by itself n times quickly. Handle large n efficiently.",
    "constraints": [
      "x between -100.0 and 100.0",
      "n between -2^31 and 2^31-1"
    ],
    "examples": [
      {
        "input": "x = 2.0, n = 10",
        "output": "1024.0",
        "explanation": "2 raised to 10 is 1024"
      },
      {
        "input": "x = 3.0, n = 3",
        "output": "27.0",
        "explanation": "3 raised to 3 is 27"
      }
    ],
    "hint": "Original: Pow(x, n)"
  },
  {
    "id": 20,
    "title": "Majority Element Finder",
    "topic": "Array",
    "difficulty": "Easy",
    "description": "Find the number that appears more than half the time in a list.",
    "constraints": [
      "List length between 1 and 50,000",
      "Numbers between -1,000,000,000 and 1,000,000,000"
    ],
    "examples": [
      {
        "input": "numbers = [3,2,3]",
        "output": "3",
        "explanation": "3 appears 2 out of 3 times, which is more than half"
      },
      {
        "input": "numbers = [1,1,2]",
        "output": "1",
        "explanation": "1 appears 2 out of 3 times, which is more than half"
      }
    ],
    "hint": "Original: Majority Element (>n/2 times)"
  },
  {
    "id": 21,
    "title": "Frequent Element Finder",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Find all numbers that appear more than one-third of the time in a list.",
    "constraints": [
      "List length between 1 and 50,000",
      "Numbers between -1,000,000,000 and 1,000,000,000"
    ],
    "examples": [
      {
        "input": "numbers = [3,2,3]",
        "output": "[3]",
        "explanation": "3 appears 2 out of 3 times, which is more than one-third"
      },
      {
        "input": "numbers = [1,2,3,1,2]",
        "output": "[1,2]",
        "explanation": "1 and 2 each appear 2 out of 5 times, which is more than one-third (1.67)"
      }
    ],
    "hint": "Original: Majority Element (n/3 times)"
  },
  {
    "id": 22,
    "title": "Robot Path Counter",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "A robot can only move down or right. How many unique paths can it take from the top-left corner to the bottom-right corner of a grid?",
    "constraints": [
      "Grid dimensions between 1x1 and 100x100"
    ],
    "examples": [
      {
        "input": "m = 3, n = 7",
        "output": "28",
        "explanation": "There are 28 unique paths"
      },
      {
        "input": "m = 2, n = 2",
        "output": "2",
        "explanation": "Two paths: right-down or down-right"
      }
    ],
    "hint": "Original: Grid Unique Paths"
  },
  {
    "id": 23,
    "title": "Double Reverse Pair Counter",
    "topic": "Array",
    "difficulty": "Hard",
    "description": "Count pairs where the first number is more than twice the second number and comes before it in the list.",
    "constraints": [
      "List length between 1 and 50,000",
      "Numbers between -2^31 and 2^31-1"
    ],
    "examples": [
      {
        "input": "numbers = [1,3,2,3,1]",
        "output": "2",
        "explanation": "Pairs (3,1) and (3,1) where 3 > 2*1"
      },
      {
        "input": "numbers = [5,2,3]",
        "output": "1",
        "explanation": "Pair (5,2) where 5 > 2*2"
      }
    ],
    "hint": "Original: Reverse Pairs"
  },
  {
    "id": 24,
    "title": "Number Pair Sum Hunter",
    "topic": "Array",
    "difficulty": "Easy",
    "description": "Find two numbers in a list that add up to a target sum. Return their positions.",
    "constraints": [
      "List length between 2 and 10,000",
      "Numbers and target between -1,000,000,000 and 1,000,000,000",
      "Only one correct pair"
    ],
    "examples": [
      {
        "input": "numbers = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Numbers at 0 and 1 add to 9"
      },
      {
        "input": "numbers = [3,3], target = 6",
        "output": "[0,1]",
        "explanation": "Numbers at 0 and 1 add to 6"
      }
    ],
    "hint": "Original: 2Sum Problem"
  },
  {
    "id": 25,
    "title": "Four Number Sum Finder",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Find four different numbers in a list that add up to a target sum. Return all unique sets of four numbers.",
    "constraints": [
      "List length between 1 and 200",
      "Numbers and target between -1,000,000,000 and 1,000,000,000"
    ],
    "examples": [
      {
        "input": "numbers = [1,0,-1,0,-2,2], target = 0",
        "output": "[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
        "explanation": "These quadruplets sum to 0"
      },
      {
        "input": "numbers = [1,2,3,4], target = 10",
        "output": "[[1,2,3,4]]",
        "explanation": "The only quadruplet that sums to 10"
      }
    ],
    "hint": "Original: 4-Sum Problem"
  },
  {
    "id": 26,
    "title": "Longest Number Chain Finder",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Find the longest chain of numbers that are consecutive in value (like 1,2,3,4). Return the length of the chain.",
    "constraints": [
      "List length between 0 and 100,000",
      "Numbers between -1,000,000,000 and 1,000,000,000"
    ],
    "examples": [
      {
        "input": "numbers = [100,4,200,1,3,2]",
        "output": "4",
        "explanation": "The chain [1,2,3,4] has length 4"
      },
      {
        "input": "numbers = [5,1,3]",
        "output": "1",
        "explanation": "No consecutive chain longer than 1"
      }
    ],
    "hint": "Original: Longest Consecutive Sequence"
  },
  {
    "id": 27,
    "title": "Subarray Sum Finder",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Find the longest continuous part of a list that adds up to exactly K. Return its length.",
    "constraints": [
      "List length between 1 and 100,000",
      "Numbers between -10,000 and 10,000",
      "K between -1,000,000,000 and 1,000,000,000"
    ],
    "examples": [
      {
        "input": "numbers = [1,-1,5,-2,3], K = 3",
        "output": "4",
        "explanation": "Subarray [1,-1,5,-2] sums to 3"
      },
      {
        "input": "numbers = [1,2,3], K = 6",
        "output": "3",
        "explanation": "The whole list sums to 6"
      }
    ],
    "hint": "Original: Largest Subarray with K sum"
  },
  {
    "id": 28,
    "title": "XOR Subarray Counter",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Count how many continuous parts of the list have a XOR value equal to K.",
    "constraints": [
      "List length between 1 and 100,000",
      "Numbers between 0 and 1,000,000,000",
      "K between 0 and 1,000,000,000"
    ],
    "examples": [
      {
        "input": "numbers = [4,2,2,6,4], K = 6",
        "output": "4",
        "explanation": "Four subarrays have XOR 6"
      },
      {
        "input": "numbers = [1,2,3], K = 3",
        "output": "2",
        "explanation": "Subarrays [3] and [1,2] have XOR 3"
      }
    ],
    "hint": "Original: Count number of subarrays with given xor K"
  },
  {
    "id": 29,
    "title": "Longest Unique Substring Finder",
    "topic": "Array",
    "difficulty": "Medium",
    "description": "Find the longest part of a string without any repeating letters. Return its length.",
    "constraints": [
      "String length between 0 and 100,000",
      "String contains English letters, digits, symbols, and spaces"
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "\"abc\" has no repeating letters"
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "\"b\" is the longest without repeat"
      }
    ],
    "hint": "Original: Longest Substring without repeat"
  }
]